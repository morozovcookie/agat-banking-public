version: '3'
volumes:
  percona:
    driver: local
  redis-data:
    driver: local
  elasticsearch-data:
    driver: local
  minio-data:
    driver: local
  scylladb:
    driver: local
  loki-data:
    driver: local
  promtail-log:
    driver: local
  prometheus:
    driver: local
  grafana-lib:
    driver: local
  grafana-log:
    driver: local
  vault-logs:
    driver: local
  vault-data:
    driver: local
  vault-policies:
    driver: local
  consul-data:
    driver: local
networks:
  percona:
    external: false
  redis:
    external: false
  elasticsearch:
    external: false
  minio:
    external: false
  jaeger-agent:
    external: false
  jaeger-collector:
    external: false
  jaeger-query:
    external: false
  scylladb:
    external: false
  loki:
    external: false
  prometheus:
    external: false
  vault:
    external: false
  consul:
    external: false
services:
  #
  #  Agat Banking
  #
  #  banking-server: {}

  #  banking-ui: {}

  banking-openapi:
    image: swaggerapi/swagger-ui@sha256:c347fa575ca0bcfcf643ba2a738e724916ed9aa5d6f8c81b93c241364c21bea4 # swaggerapi/swagger-ui:v3.52.5
    environment:
    - SWAGGER_JSON=/openapi/openapi.json
    volumes:
    - ./../../api/v1:/openapi
    ports:
    - '127.0.0.1:8081:8080'

  banking-mysql-schema:
    build:
      context: ./../..
      dockerfile: banking-mysql-schema/Dockerfile
    environment:
      - MYSQL_HOST=percona
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=root
      - MYSQL_DATABASE=banking
    networks:
      - percona
    depends_on:
      - percona

  #
  #  Mail Server
  #
  #  mail-server: {}

  #
  # Percona Database
  #
  percona:
    image: percona/percona-server@sha256:ad0f73c99b004074c2e8555c5229d247e95df8a9f7c0f0433d73bc86881f13d9 # percona/percona-server:8.0.26
    environment:
    - MYSQL_DATABASE=banking
    - MYSQL_USER=agat
    - MYSQL_PASSWORD=agat
    - MYSQL_ROOT_USER=root
    - MYSQL_ROOT_PASSWORD=root
    networks:
    - percona
    ports:
    - '127.0.0.1:3306:3306'
    volumes:
    - percona:/var/lib/mysql

  #
  #  Key-Value Storage
  #
  redis:
    image: redis@sha256:5d30f5c16e473549ad7c950b0ac3083039719b1c9749519c50e18017dd4bfc54 # redis:6.2.6
    volumes:
    - redis-data:/data
    networks:
    - redis
    ports:
    - '127.0.0.1:6379:6379'

  #
  #  Full-Text Search Engine
  #
  elasticsearch:
    image: elasticsearch@sha256:55a0901f558968fb615d25032fdbeb9c6dd112d8ead05b830b1da4326e2f482b # elasticsearch:7.14.2
    environment:
    - node.name=es01
    - cluster.name=es-docker-cluster
    - discovery.type=single-node
    - bootstrap.memory_lock=true
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
    - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
    - elasticsearch
    ports:
    - '127.0.0.1:9200:9200'
    - '127.0.0.1:9300:9300'

  #
  #  S3 Object Storage
  #
  minio:
    image: minio/minio:RELEASE.2020-12-29T23-29-29Z
    command: server --address 127.0.0.1:9000 /data
    environment:
    - MINIO_ACCESS_KEY=minio_access_key
    - MINIO_SECRET_KEY=minio_secret_key
    volumes:
    - minio-data:/data
    networks:
    - minio
    ports:
    - '127.0.0.1:9001:9000'

  #
  #  Request Tracing
  #
  # The Jaeger agent is a network daemon that listens for spans sent over UDP, which it batches and sends to the
  # collector. It is designed to be deployed to all hosts as an infrastructure component. The agent abstracts the
  # routing and discovery of the collectors away from the client.
  #
  jaeger-agent:
    image: jaegertracing/jaeger-agent@sha256:3dcbaaf8ac16e3e5e6ddcefd82ec421f332cb2a18d63a280222b0613e8319c9d # jaegertracing/jaeger-agent:1.27.0
    command:
    - '--reporter.grpc.host-port=jaeger-collector:14250'
    ports:
    - '127.0.0.1:6831:6831/udp'
    networks:
    - jaeger-agent
    - jaeger-collector
    depends_on:
    - jaeger-collector

  #
  # The Jaeger collector receives traces from Jaeger agents and runs them through a processing pipeline. Currently, our
  # pipeline validates traces, indexes them, performs any transformations, and finally stores them.
  #
  # Jaegerâ€™s storage is a pluggable component which currently supports Cassandra, Elasticsearch and Kafka.
  #
  jaeger-collector:
    image: jaegertracing/jaeger-collector@sha256:8d18ad8b616b843e79cf484a4c9307c8a62347ade531ca29ad1bad9055fa1e07 # jaegertracing/jaeger-collector:1.27.0
    command:
    - '--cassandra.keyspace=jaeger_v1_dc1'
    - '--cassandra.servers=jaeger-scylla'
    - '--collector.zipkin.host-port=9411'
    - '--sampling.initial-sampling-probability=.5'
    - '--sampling.target-samples-per-second=.01'
    environment:
    - SAMPLING_CONFIG_TYPE=adaptive
    networks:
    - scylladb
    - jaeger-collector
    depends_on:
    - jaeger-cassandra-schema

  #
  # Query is a service that retrieves traces from storage and hosts a UI to display them.
  #
  jaeger-query:
    image: jaegertracing/jaeger-query@sha256:1c29cde9d047cd144ab74e806c9990d61d9c81f1c429c381b12d16e4d4452391 # jaegertracing/jaeger-query:1.27.0
    command:
    - '--cassandra.keyspace=jaeger_v1_dc1'
    - '--cassandra.servers=jaeger-scylla'
    networks:
    - jaeger-query
    - scylladb
    ports:
    - '127.0.0.1:16686:16686'
    depends_on:
    - jaeger-cassandra-schema

  #
  # Scylla is the Apache Casandra compatible database written on C++.
  #
  jaeger-scylla:
    image: scylladb/scylla@sha256:5db5e7be3c13ea2db3a064f0d0523e9aff13e56c2915e1fa2cebf6d468ff1189 # scylladb/scylla:4.5.1
    command: --smp 1 --overprovisioned 1 --api-address 0.0.0.0 --developer-mode 1
    volumes:
    - scylladb:/var/lib/scylla
    networks:
    - scylladb

  jaeger-cassandra-schema:
    image: jaegertracing/jaeger-cassandra-schema@sha256:ca3f6f3dd78223eec372430c7b7287eba7f98b9d0ba2491c2145b82aae2ab08b # jaeger-cassandra-schema:1.27.0
    environment:
    - CQLSH_HOST=jaeger-scylla
    networks:
    - scylladb
    depends_on:
    - jaeger-scylla

  #
  # Ingester is a service that reads from Kafka topic and writes to another storage backend (Cassandra, Elasticsearch).
  #
  # jaeger-ingester:
  #   image: jaegertracing/jaeger-ingester@sha256:cba1d9191241df518372f885d592ef430400a1521fbdcf185b0c569082f8f8c6 # jaegertracing/jaeger-ingester:1.27.0

  #
  #  Logging
  #
  loki:
    image: grafana/loki@sha256:f63e49ea86a8c180d065b37547525eb8ccc3d51548ee64882d52bf92a485e481 # grafana/loki:2.3.0
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
    - loki-data:/data
    networks:
    - loki
    ports:
    - '127.0.0.1:3100:3100'

  promtail:
    image: grafana/promtail@sha256:1e8554cdac6681f877d10a2a383d8fcc2f475188914282ccf86722c2e23c501c # grafana/promtail:2.3.0
    command: -config.file=/etc/promtail/config.yml
    volumes:
    - promtail-log:/var/log
    networks:
    - loki
    depends_on:
    - loki

  #
  #  Metrics
  #
  prometheus:
    image: prom/prometheus@sha256:985a667c1b3e9227947ab50279505322668cb8d22f3257aa1b6062cacf514316 # prom/prometheus:v2.30.3
    command: --config.file=/etc/prometheus/prometheus.yaml
    volumes:
    - prometheus:/prometheus
    - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
    ports:
    - '127.0.0.1:9090:9090'
    networks:
    - prometheus

  grafana:
    image: grafana/grafana@sha256:66b2b912876e1e195515abe0feff1786e7e827faa5780179b170dbb969595779 # grafana/grafana:8.2.2
    volumes:
    - grafana-lib:/var/lib/grafana
    - grafana-log:/var/log/grafana
    networks:
    - prometheus
    - loki
    - elasticsearch
    - jaeger-query
    ports:
    - '127.0.0.1:3000:3000'
    depends_on:
    - prometheus
    - elasticsearch
    - jaeger-query
    - loki

  #
  #  Hashicorp
  #
  vault:
    image: vault@sha256:b98869b86956112ea98ee1ae4dfa5574841e9972b952fd14164b3cf2b654c311 # vault:1.8.4
    command: server -dev -config=/vault-config.hcl
    environment:
    - VAULT_DEV_ROOT_TOKEN_ID=root
    volumes:
    - ./vault/config.hcl:/vault-config.hcl:ro
    - vault-policies:/vault/policies
    - vault-data:/vault/data
    - vault-logs:/vault/logs
    networks:
    - vault
    - consul
    ports:
    - '127.0.0.1:8200:8200'
    cap_add:
    - IPC_LOCK
    depends_on:
    - consul

  consul:
    image: consul@sha256:b8f1e9c2d0e3c9b2714f89d3c74722b214b7695a540e8c32c34346c228b24a0c # consul:1.9.10
    command: agent -server -bind 0.0.0.0 -client 0.0.0.0 -bootstrap-expect 1 -config-file=/consul-config.hcl
    volumes:
    - ./consul/config.hcl:/consul-config.hcl:ro
    - consul-data:/consul/data
    networks:
    - consul
    ports:
    - '127.0.0.1:8500:8500'
